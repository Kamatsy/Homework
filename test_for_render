import telebot
import os
from PIL import Image
import re
import requests
from bs4 import BeautifulSoup
import firebase_admin
import unicodedata
from firebase_admin import credentials, db, firestore
from firebase_admin import initialize_app
from firebase_admin import storage

cred = credentials.Certificate(r'/home/Kamatzy/bot_oriental_case/chatbot-6e1e3-firebase-adminsdk-iskiw-47ed99ac1e.json')
firebase_admin = firebase_admin.initialize_app(cred, {'databaseURL': 'https://chatbot-6e1e3.firebaseio.com'})
bot = telebot.TeleBot('5806034022:AAG6BNy-EFrE_2vWxMPvXa9MDH-YHZz0D3c')

user_data = {}

MacBook_models = [
    "Macbook 12",
    "Macbook Air 11.6 2010-2015",
    "Macbook Air 13.3 2010-2017",
    "Macbook Air 13.3 2018-2020 M1",
    "Macbook Air 13.6 2022 M2",
    "Macbook Air 15 2023",
    "Macbook Pro 13.3 2008-2012",
    "Macbook Pro 13.3 2016-2022",
    "Macbook Pro 13.3 Retina late 2012-2015",
    "Macbook Pro 14 2021/2023 M1/M2",
    "Macbook Pro 15.4 Retina 2016-2019",
    "Macbook Pro 15.4 Retina late 2012-2015",
    "Macbook Pro 16 2019-2020",
    "Macbook Pro 16 M1 2021/2023 M1/M2",
    "–ù–∞–∑–∞–¥"
]
phone_models = [
    "iPhone 5C",
    "iPhone 5/5s/SE",
    "iPhone 6/6s",
    "iPhone 6 Plus",
    "iPhone 7/8/SE2",
    "iPhone 7+/8+",
    "iPhone X/Xs",
    "iPhone XR",
    "iPhone XS Max",
    "iPhone 11",
    "iPhone 11 Pro",
    "iPhone 11 Pro Max",
    "iPhone 12 mini",
    "iPhone 12",
    "iPhone 12 Pro",
    "iPhone 12 Pro Max",
    "iPhone 13 mini",
    "iPhone 13",
    "iPhone 13 Pro",
    "iPhone 13 Pro Ma—Ö",
    "iPhone 14",
    "iPhone 14 Pro",
    "iPhone 14 Plus",
    "iPhone 14 Pro Max",
    "–ù–∞–∑–∞–¥"
]
AirPods_models = [
    "AirPods 1/2",
    "AirPods Pro",
    "Airpods 3",
    "AirPods Pro 2",
    "–ù–∞–∑–∞–¥"
]
passport_models = [
    "–ü–∞—Å–ø–æ—Ä—Ç",
    "ID",
    "–ù–∞–∑–∞–¥"
]

def send_to_manager(user_id):
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = r'/home/Kamatzy/bot_oriental_case/chatbot-6e1e3-firebase-adminsdk-iskiw-47ed99ac1e.json'
    db = firestore.Client()
    collection_name = 'users'
    doc_ref = db.collection(collection_name).document(user_id)

    doc_snapshot = doc_ref.get()
    print(doc_snapshot)
    target_chat_id = '-1001979094977'
    bot = telebot.TeleBot('5806034022:AAG6BNy-EFrE_2vWxMPvXa9MDH-YHZz0D3c')
    data = doc_snapshot.to_dict()
    data_user = data[user_id]

    if len(data_user) == 5:
        msg = f'''
    NEW ORDER!\n
    User_name: {data_user['user_name']}
    Mobile_phone: {data_user['mobile_phone']}
    Selected_model: {data_user['selected_model']}
    Chosen_design: {data_user['chosen_design']}
    Delivery_method: {data_user['delivery_method']}
    '''
    elif len(data_user) == 7:
        msg = f'''
    NEW ORDER!\n
    User_name: {data_user['user_name']}
    Mobile_phone: {data_user['mobile_phone']}
    Selected_model: {data_user['selected_model']}
    Chosen_design: {data_user['chosen_design']}
    Delivery_method: {data_user['delivery_method']}
    Delivery_credentials: {data_user['delivery_credentials']}
    Payment_method: {data_user['payment_method']}
    '''
    bot.send_message(target_chat_id, msg)
user_data = {}

MacBook_models = [
    "Macbook 12",
    "Macbook Air 11.6 2010-2015",
    "Macbook Air 13.3 2010-2017",
    "Macbook Air 13.3 2018-2020 M1",
    "Macbook Air 13.6 2022 M2",
    "Macbook Air 15 2023",
    "Macbook Pro 13.3 2008-2012",
    "Macbook Pro 13.3 2016-2022",
    "Macbook Pro 13.3 Retina late 2012-2015",
    "Macbook Pro 14 2021/2023 M1/M2",
    "Macbook Pro 15.4 Retina 2016-2019",
    "Macbook Pro 15.4 Retina late 2012-2015",
    "Macbook Pro 16 2019-2020",
    "Macbook Pro 16 M1 2021/2023 M1/M2",
    "–ù–∞–∑–∞–¥"
]
phone_models = [
    "iPhone 5C",
    "iPhone 5/5s/SE",
    "iPhone 6/6s",
    "iPhone 6 Plus",
    "iPhone 7/8/SE2",
    "iPhone 7+/8+",
    "iPhone X/Xs",
    "iPhone XR",
    "iPhone XS Max",
    "iPhone 11",
    "iPhone 11 Pro",
    "iPhone 11 Pro Max",
    "iPhone 12 mini",
    "iPhone 12",
    "iPhone 12 Pro",
    "iPhone 12 Pro Max",
    "iPhone 13 mini",
    "iPhone 13",
    "iPhone 13 Pro",
    "iPhone 13 Pro Ma—Ö",
    "iPhone 14",
    "iPhone 14 Pro",
    "iPhone 14 Plus",
    "iPhone 14 Pro Max",
    "–ù–∞–∑–∞–¥"
]
AirPods_models = [
    "AirPods 1/2",
    "AirPods Pro",
    "Airpods 3",
    "AirPods Pro 2",
    "–ù–∞–∑–∞–¥"
]
passport_models = [
    "–ü–∞—Å–ø–æ—Ä—Ç",
    "ID",
    "–ù–∞–∑–∞–¥"
]

def send_to_manager(user_id):
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = r'/home/Kamatzy/bot_oriental_case/chatbot-6e1e3-firebase-adminsdk-iskiw-47ed99ac1e.json'
    db = firestore.Client()
    collection_name = 'users'
    doc_ref = db.collection(collection_name).document(user_id)

    doc_snapshot = doc_ref.get()
    print(doc_snapshot)
    target_chat_id = '-1001979094977'
    bot = telebot.TeleBot('5806034022:AAG6BNy-EFrE_2vWxMPvXa9MDH-YHZz0D3c')
    data = doc_snapshot.to_dict()
    data_user = data[user_id]

    if len(data_user) == 5:
        msg = f'''
    NEW ORDER!\n
    User_name: {data_user['user_name']}
    Mobile_phone: {data_user['mobile_phone']}
    Selected_model: {data_user['selected_model']}
    Chosen_design: {data_user['chosen_design']}
    Delivery_method: {data_user['delivery_method']}
    '''
    elif len(data_user) == 7:
        msg = f'''
    NEW ORDER!\n
    User_name: {data_user['user_name']}
    Mobile_phone: {data_user['mobile_phone']}
    Selected_model: {data_user['selected_model']}
    Chosen_design: {data_user['chosen_design']}
    Delivery_method: {data_user['delivery_method']}
    Delivery_credentials: {data_user['delivery_credentials']}
    Payment_method: {data_user['payment_method']}
    '''
    bot.send_message(target_chat_id, msg)
@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(
        telebot.types.KeyboardButton("–•–æ—á—É –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"),
        telebot.types.KeyboardButton("–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è"),
        telebot.types.KeyboardButton("–ê–∫—Ü—ñ—ó —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó"),
        telebot.types.KeyboardButton("–•–æ—á—É –ø–æ–±–∞—á–∏—Ç–∏ –±–µ—Å—Ç—Å–µ–ª–µ—Ä–∏")
    )
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤—ñ—Ç, —Ü–µ –º–∞–≥–∞–∑–∏–Ω —Ç–≤–æ—ó—Ö —É–ª—é–±–ª–µ–Ω–∏—Ö –∫–µ–π—Å—ñ–≤ Orientalcaseü§ç –û–±–µ—Ä–∏, —â–æ —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ?', reply_markup=markup)
    print(user_data)
@bot.message_handler(commands=['stop'])
def stop(message):
    handle_stop_command(message)
def handle_stop_command(message):
    user_id = str(message.from_user.id)
    markup = telebot.types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, "–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ. –î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start", reply_markup=markup)
@bot.message_handler(func=lambda message: message.text == "–•–æ—á—É –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", content_types=['text'])
def order(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add(
        telebot.types.KeyboardButton("/–¢–µ–ª–µ—Ñ–æ–Ω"),
        telebot.types.KeyboardButton("/MacBook"),
        telebot.types.KeyboardButton("/AirPods"),
        telebot.types.KeyboardButton("/–û–±–∫–ª–∞–¥–∏–Ω–∫–∏"),
        telebot.types.KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    )
    bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤—ñ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –î–ª—è —á–æ–≥–æ –±–∞–∂–∞—î—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏ –∫–µ–π—Å/–æ–±–∫–ª–∞–¥–∏–Ω–∫—É?', reply_markup=markup)
@bot.message_handler(func=lambda message: message.text == "–ê–∫—Ü—ñ—ó —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó", content_types=['text'])
def order(message):
    sales_text = ("–ù–∞—Ä–∞–∑—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–∞–∫—ñ –∞–∫—Ü—ñ–π–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó:\n"
                     "ü§ç *–ê–∫—Ü—ñ—è 1+1=3*. –ü—Ä–∏ –ø–æ–∫—É–ø—Ü—ñ –±—É–¥—å-—è–∫–æ–≥–æ –∫–µ–π—Å–∞ –∑ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤ –Ω–∞—à–æ–º—É —à–æ—É—Ä—É–º—ñ –∑–∞ –∞–¥—Ä–µ—Å–æ—é –º. –ö–∏—ó–≤, –≤—É–ª. –°–∞–∫—Å–∞–≥–∞–Ω—Å—å–∫–æ–≥–æ, 77 –∑ –ø–æ–Ω–µ–¥—ñ–ª–∫–∞ –ø–æ –ø‚Äô—è—Ç–Ω–∏—Ü—é –∑ 10.00 –¥–æ 19.00.\n"
                     "ü§ç –ü—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫–µ–π—Å—É –∑ –∫–∏—à–µ–Ω–µ—é - *6 —Ç–≤–æ—ó—Ö —Ñ–æ—Ç–æ –≤ –ø–æ–¥–∞—Ä—É–Ω–æ–∫*.\n"
                     "ü§ç –ü—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–ø–ª–µ–∫—Ç—É –∫–µ–π—Å—É –¥–ª—è MacBook + –∫–µ–π—Å –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω *–∑–Ω–∏–∂–∫–∞ -100 –≥—Ä–Ω* –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç.")
    bot.send_message(message.chat.id, sales_text, parse_mode='Markdown')
@bot.message_handler(func=lambda message: message.text == "–•–æ—á—É –ø–æ–±–∞—á–∏—Ç–∏ –±–µ—Å—Ç—Å–µ–ª–µ—Ä–∏", content_types=['text'])
def order(message):
    sales_text = ("–ù–∞—Ä–∞–∑—ñ –Ω–∞—à–∏–º–∏ –±–µ—Å—Ç—Å–µ–ª–∞–º–∏ —î:\n"
                     "ü§ç *Social Media* - CUSTOMIZE \n"
                     "ü§ç *F ck* CUSTOMIZE.\n"
                     "ü§ç *This is my iPhone*\n"
                     "CUSTOMIZE - –º–∏ –º–æ–∂–µ–º–æ –∑—Ä–æ–±–∏—Ç–∏ —Ç–≤—ñ–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –Ω–∞–ø–∏—Å! –î–ª—è —Ü—å–æ–≥–æ —Å–ª—ñ–¥ –æ–±—Ä–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –æ–ø—Ü—ñ—é —ñ –ø—ñ—Å–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –º–∏ –∑–≤‚Äò—è–∂–µ–º–æ—Å—å –∑ —Ç–æ–±–æ—é –¥–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π.\n"
                     "–ü–µ—Ä–µ—Ö–æ–¥—å –Ω–∞ –Ω–∞—à —Å–∞–π—Ç, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ:üëá\n"
                     "https://orientalcase.com.ua/bestsellers")
    bot.send_message(message.chat.id, sales_text, parse_mode='Markdown')
@bot.message_handler(func=lambda message: message.text.lower() == "–Ω–∞–∑–∞–¥", content_types=['text'])
def back_to_menu(message):
    user_id = str(message.from_user.id)
    user_data[user_id] = {}
    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add(
        telebot.types.KeyboardButton("/–¢–µ–ª–µ—Ñ–æ–Ω"),
        telebot.types.KeyboardButton("/MacBook"),
        telebot.types.KeyboardButton("/AirPods"),
        telebot.types.KeyboardButton("/–û–±–∫–ª–∞–¥–∏–Ω–∫–∏"),
        telebot.types.KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    )
    bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤—ñ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –î–ª—è —á–æ–≥–æ –±–∞–∂–∞—î—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏ –∫–µ–π—Å/–æ–±–∫–ª–∞–¥–∏–Ω–∫—É?', reply_markup=markup)
@bot.message_handler(func=lambda message: message.text.lower() == "–≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", content_types=['text'])
def main_menu_button(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(
        telebot.types.KeyboardButton("–•–æ—á—É –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"),
        telebot.types.KeyboardButton("–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è"),
        telebot.types.KeyboardButton("–ê–∫—Ü—ñ—ó —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó"),
        telebot.types.KeyboardButton("–•–æ—á—É –ø–æ–±–∞—á–∏—Ç–∏ –±–µ—Å—Ç—Å–µ–ª–µ—Ä–∏")
    )
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤—ñ—Ç, —Ü–µ –º–∞–≥–∞–∑–∏–Ω —Ç–≤–æ—ó—Ö —É–ª—é–±–ª–µ–Ω–∏—Ö –∫–µ–π—Å—ñ–≤ Orientalcase ü§ç –û–±–µ—Ä–∏, —â–æ —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ?', reply_markup=markup)
@bot.message_handler(func=lambda message: message.text == '–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è', content_types=['text'])
def faq(message):
    faq_text = ("–ú–∏ –ø—ñ–¥–≥–æ—Ç—É–≤–∞–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å.\n"
                "–û–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å —ñ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏ –º–æ–∂–Ω–∞ –Ω–∏–∂—á–µ, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –ø–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä:\n"
                "/1. –ú–æ–∂–Ω–∞ –∑–∞–º–æ–≤–∏—Ç–∏ –∑—ñ —Å–≤–æ—ó–º –¥–∏–∑–∞–π–Ω–æ–º?\n"
                "/2. –ú–æ–∂–Ω–∞ —Ñ–æ—Ç–æ, —è–∫ –≤–∏–≥–ª—è–¥–∞—î —Ç–æ–π —á–∏ —ñ–Ω—à–∏–π —Ç–æ–≤–∞—Ä?\n"
                "/3. –Ø–∫—ñ –∫–µ–π—Å–∏ –∑ —Ä–µ–º–µ–Ω—è–º–∏ —É –≤–∞—Å —î?\n"
                "/4. –£ –≤–∞—Å —î –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —á–∏ –æ–±–º—ñ–Ω?\n"
                "/5. –ü—Ä–æ—Ç–∏—É–¥–∞—Ä–Ω–∏–π –∫–µ–π—Å –∑ –∑–∞–∫—Ä–∏—Ç–æ—é –∫–∞–º–µ—Ä–æ—é?\n"
                "/6. –ó–º–æ–∂–µ—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–∏, —è–∫ –≤–∏–≥–ª—è–¥–∞—Ç–∏–º–µ –∫–µ–π—Å –Ω–∞ –ø–µ–≤–Ω—ñ–π –º–æ–¥–µ–ª—ñ?\n"
                "/7. –ü—Ä–æ–∑–æ—Ä–∏–π —Å–∏–ª—ñ–∫–æ–Ω –∂–æ–≤—Ç—ñ—î?\n"
                "/8. –ú–æ–∂–Ω–∞ –∑–∞–±—Ä–∞—Ç–∏ —Å–∞–º–æ–≤–∏–≤–æ–∑–æ–º?\n"
                "/9. –£ –≤–∞—Å —î –ø–æ–¥–∞—Ä—É–Ω–∫–æ–≤–µ –ø–∞–∫—É–≤–∞–Ω–Ω—è?\n"
                "/10. –î–æ –∫–µ–π—Å—É –∑ –∫–∏—à–µ–Ω–µ—é –π–¥—É—Ç—å —Ñ–æ—Ç–æ –≤ –ø–æ–¥–∞—Ä—É–Ω–æ–∫?\n"
                "/11. –Ø–∫—ñ —î –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∫–æ–º–ø–ª–µ–∫—Ç—ñ–≤?")
    bot.send_message(message.chat.id, faq_text, parse_mode='Markdown')
@bot.message_handler(commands=['–¢–µ–ª–µ—Ñ–æ–Ω'])
def phone(message):
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=create_phone_keyboard())
def create_phone_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [telebot.types.KeyboardButton(model) for model in phone_models]
    markup.add(*buttons)
    return markup
@bot.message_handler(func=lambda message: message.text in phone_models, content_types=['text'])
def handle_phone_model(message):
    user_id = str(message.from_user.id)
    user_data[user_id] = {}
    user_data[user_id]["selected_model"] = message.text
    bot.send_message(message.chat.id, "–í–∏ –æ–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å: " + message.text)
    bot.send_message(message.chat.id, "–ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º https://orientalcase.com.ua/phones —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å –¥–∏–∑–∞–π–Ω, –∫–æ–ª—ñ—Ä —Ç–∞ —Ç–∏–ø –∫–µ–π—Å—É –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n"
                                      "–ü–æ—Ç—ñ–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –æ–±—Ä–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∏–∂—á–µ üëá",reply_markup=telebot.types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, ask_design)
@bot.message_handler(commands=['MacBook'])
def phone(message):
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å MacBook:", reply_markup=create_MacBook_keyboard())
def create_MacBook_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [telebot.types.KeyboardButton(model) for model in MacBook_models]
    markup.add(*buttons)
    return markup
@bot.message_handler(func=lambda message: message.text in MacBook_models, content_types=['text'])
def handle_macbook_model(message):
    user_id = str(message.from_user.id)
    user_data[user_id] = {}
    user_data[user_id]["selected_model"] = message.text
    bot.send_message(message.chat.id, "–í–∏ –æ–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å: " + message.text)
    bot.send_message(message.chat.id, "–ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º https://orientalcase.com.ua/phones —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å –¥–∏–∑–∞–π–Ω, –∫–æ–ª—ñ—Ä —Ç–∞ —Ç–∏–ø –∫–µ–π—Å—É –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n"
                                      "–ü–æ—Ç—ñ–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –æ–±—Ä–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∏–∂—á–µ üëá",reply_markup=telebot.types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, ask_design)
@bot.message_handler(commands=['–û–±–∫–ª–∞–¥–∏–Ω–∫–∏'])
def phone(message):
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å, –¥–ª—è —á–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –æ–±–∫–ª–∞–¥–∏–Ω–∫–∞:", reply_markup=create_passport_keyboard())
def create_passport_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [telebot.types.KeyboardButton(model) for model in passport_models]
    markup.add(*buttons)
    return markup
@bot.message_handler(func=lambda message: message.text in passport_models, content_types=['text'])
def handle_passport_model(message):
    user_id = str(message.from_user.id)
    user_data[user_id] = {}
    user_data[user_id]["selected_model"] = message.text
    bot.send_message(message.chat.id, "–í–∏ –æ–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å: " + message.text)
    bot.send_message(message.chat.id, "–ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º https://orientalcase.com.ua/phones —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å –¥–∏–∑–∞–π–Ω, –∫–æ–ª—ñ—Ä —Ç–∞ —Ç–∏–ø –∫–µ–π—Å—É –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n"
                                      "–ü–æ—Ç—ñ–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –æ–±—Ä–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∏–∂—á–µ üëá",reply_markup=telebot.types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, ask_design)
@bot.message_handler(commands=['AirPods'])
def phone(message):
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å AirPods:", reply_markup=create_AirPods_keyboard())
def create_AirPods_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [telebot.types.KeyboardButton(model) for model in AirPods_models]
    markup.add(*buttons)
    return markup
@bot.message_handler(func=lambda message: message.text in AirPods_models, content_types=['text'])
def handle_airpods_model(message):
    user_id = str(message.from_user.id)
    user_data[user_id] = {}
    user_data[user_id]["selected_model"] = message.text
    bot.send_message(message.chat.id, "–í–∏ –æ–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å: " + message.text)
    bot.send_message(message.chat.id, "–ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º https://orientalcase.com.ua/phones —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å –¥–∏–∑–∞–π–Ω, –∫–æ–ª—ñ—Ä —Ç–∞ —Ç–∏–ø –∫–µ–π—Å—É –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n"
                                      "–ü–æ—Ç—ñ–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –æ–±—Ä–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∏–∂—á–µ üëá",reply_markup=telebot.types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, ask_design)
@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_message(message):
    if message.text == "/1":
        bot.send_message(message.chat.id, "–¢–∞–∫, –∑–≤—ñ—Å–Ω–æ‚ù§Ô∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å –π–æ–≥–æ –Ω–∞–º, —â–æ–± –¥–∏–∑–∞–π–Ω–µ—Ä –ø—ñ–¥–≥–æ—Ç—É–≤–∞–≤ –¥–æ –¥—Ä—É–∫—É. –¢–∞–∫–æ–∂ –ø–æ–∫–∞–∂–µ–º–æ, —è–∫ –≤–∏–≥–ª—è–¥–∞—Ç–∏–º–µ.")
    elif message.text == "/2":
        bot.send_message(message.chat.id, "–¢–∞–∫, –∑–≤—ñ—Å–Ω–æ‚ù§Ô∏è –í–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –í–æ–ª–æ–¥–∏–º–∏—Ä –≤–∂–µ –∑–æ–≤—Å—ñ–º —Å–∫–æ—Ä–æ –Ω–∞–¥—ñ—à–ª–µ —Ñ–æ—Ç–æ —Ç–∞ –≤—ñ–¥–µ–æ–æ–≥–ª—è–¥.")
    elif message.text == "/3":
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç, –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –±—ñ–ª—å—à–µ 10 –∫–æ–ª—å–æ—Ä—ñ–≤ —Ä–µ–º—ñ–Ω—Ü—ñ–≤üôåüèº –ú–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –ø—Ä–æ–∑–æ—Ä–∏–π, —á–æ—Ä–Ω–∏–π –∫–µ–π—Å —Ç–∞ –±—É–¥—å-—è–∫–∏–π –ø—Ä–∏–Ω—Ç. –ó–æ–≤—Å—ñ–º —Å–∫–æ—Ä–æ –≤–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –í–æ–ª–æ–¥–∏–º–∏—Ä –ø–æ–∫–∞–∂–µ –≤—Å—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ ü§ç")
    elif message.text == "/4":
        bot.send_message(message.chat.id, "–¢–∞–∫‚ù£Ô∏è –û–±–º—ñ–Ω —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –º–æ–∂–ª–∏–≤—ñ –ø—Ä–æ—Ç—è–≥–æ–º 14 –¥–Ω—ñ–≤ –Ω–∞ –∫–µ–π—Å–∏ –∑ –Ω–∞—à–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥—É —É –≤–∏–ø–∞–¥–∫—É, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ –±—É–¥–∏ –≤ –µ–∫—Å–ø–ª—É–∞—Ç–∞—Ü—ñ—ó. –ù–∞ –∫–µ–π—Å–∏ –∑ –≤–ª–∞—Å–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º, –Ω–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î –æ–±–º—ñ–Ω—É —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è.")
    elif message.text == "/5":
        bot.send_message(message.chat.id, "–í—ñ–Ω –±—É–¥–µ –∑ –≤—ñ–¥–∫—Ä–∏—Ç–æ—é –∫–∞–º–µ—Ä–æ—é, –∞–ª–µ –º–∞—î –∑–∞—Ö–∏—Å–Ω—ñ –±–æ—Ä—Ç–∏–∫–∏, —â–æ –≤–∏—Å—Ç—É–ø–∞—é—Ç—å –Ω–∞–¥ –Ω–µ—éü§ç –°–∞–º–µ —Ç–æ–º—É –≤—ñ–Ω –Ω–∞–¥—ñ–π–Ω–æ –∑–∞—Ö–∏—â–∞—î.")
    elif message.text == "/6":
        bot.send_message(message.chat.id, "–¢–∞–∫, –Ω–∞—à –¥–∏–∑–∞–π–Ω–µ—Ä –ø—ñ–¥–≥–æ—Ç—É—î –¥–ª—è –≤–∞—Å –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—é‚ù§Ô∏è")
    elif message.text == "/7":
        bot.send_message(message.chat.id, "–ü—Ä–æ—Ç—è–≥–æ–º 2-3 –º—ñ—Å—è—Ü—ñ–≤ üòå –ú–æ–∂–µ–º–æ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–∏–π –ø—Ä–æ–∑–æ—Ä–∏–π –∫–µ–π—Å, —è–∫–∏–π –Ω–µ –∂–æ–≤—Ç—ñ—Ç–∏–º–µ –∞–±–æ —á–æ—Ä–Ω–∏–π —Å–∏–ª—ñ–∫–æ–Ω–æ–≤–∏–π.")
    elif message.text == "/8":
        bot.send_message(message.chat.id, "–¢–∞–∫, –∑–≤—ñ—Å–Ω–æ ü§ç –ß–µ–∫–∞—î–º–æ –Ω–∞ –≤–∞—Å –∑–∞ –∞–¥—Ä–µ—Å–æ—é –º. –ö–∏—ó–≤, –≤—É–ª. –°–∞–∫—Å–∞–≥–∞–Ω—Å—å–∫–æ–≥–æ, 77 –ø–Ω-–ø—Ç –∑ 10 –¥–æ 19. –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–º, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞ –≥–æ–¥–∏–Ω—É.")
    elif message.text == "/9":
        bot.send_message(message.chat.id, "–ù–∞—à–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –ø–∞–∫—É–≤–∞–Ω–Ω—è –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –¥–ª—è –ø–æ–¥–∞—Ä—É–Ω–∫—É, –∞ —Ç–∞–∫–æ–∂ –¥–æ–¥–∞—î–º–æ –ª–∏—Å—Ç—ñ–≤–∫—É –¥–æ –∫–æ–∂–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ü§ç –ó–æ–≤—Å—ñ–º —Å–∫–æ—Ä–æ –≤–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –í–æ–ª–æ–¥–∏–º–∏—Ä –Ω–∞–¥—ñ—à–ª–µ —Ñ–æ—Ç–æ.")
    elif message.text == "/10":
        bot.send_message(message.chat.id, "–¢–∞–∫, —Ü—ñ–Ω–∞ –∫–µ–π—Å—É 350 –≥—Ä–Ω, –∞ —Ç–∞–∫–æ–∂ 6 –í–∞—à–∏—Ö —Ñ–æ—Ç–æ –π–¥—É—Ç—å –≤ –ø–æ–¥–∞—Ä—É–Ω–æ–∫ ü•∞")
    elif message.text == "/11":
        bot.send_message(message.chat.id, "–£ –Ω–∞—Å –≤–µ–ª–∏–∫–∏–π –≤–∏–±—ñ—Ä –∫–æ–º–ø–ª–µ–∫—Ç—ñ–≤üôåüèº –ó–æ–≤—Å—ñ–º —Å–∫–æ—Ä–æ –í–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –í–æ–ª–æ–¥–∏–º–∏—Ä –ø–æ–∫–∞–∂–µ –≤—Å—ñ-–≤—Å—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏.")
    elif message.text == "–î–∞–ª—ñ":
        bot.send_message(message.chat.id, "–í–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è:")
        bot.register_next_step_handler(message, ask_name)
def ask_design(message):
    user_id = str(message.from_user.id)
    cleaned_text = ' '.join(message.text.split())
    if "chosen_design" not in user_data[user_id]:
        user_data[user_id]["chosen_design"] = cleaned_text
    else:
        user_data[user_id]["chosen_design"] += "\n" + cleaned_text
    bot.send_message(message.chat.id, f"–í–∏ –æ–±—Ä–∞–ª–∏:\n{user_data[user_id]['chosen_design']}")
    bot.send_message(message.chat.id, "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–∞–ª—ñ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è¬ª –Ω–∞–ø–∏—à–µ–º–æ —Ç–∏–ø—É: ¬´–ù–∞—Ç–∏—Å–∫–∞—é—á–∏ –∫–Ω–æ–ø–∫—É ¬´–î–∞–ª—ñ¬ª, –≤–∏ –ø–µ—Ä–µ–π–¥–µ—Ç–µ –¥–æ –≤–≤–æ–¥—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö –¥–∞–Ω–∏—Ö:", reply_markup=create_next_keyboard())
def create_next_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("–î–∞–ª—ñ"))
    return markup
def get_chosen_design(text, *keywords):
    keyword_pattern = r'\b(?:' + '|'.join(re.escape(keyword) for keyword in keywords) + r')\b'
    sentences = re.split(r'(?<!\w\.\w.)(?<![A-Z][a-z]\.)(?<=\.|\?)\s', text)
    sentences_with_keyword = [sentence for sentence in sentences if re.search(keyword_pattern, sentence, re.IGNORECASE)]
    return chosen_design
def ask_name(message):
    user_id = str(message.from_user.id)
    if message.text.lower() == "–¥–∞–ª—ñ":
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è:")
        bot.register_next_step_handler(message, ask_name)  # –ó–∞–ø–∏—Ç–∞—Ç–∏ —ñ–º'—è –∑–Ω–æ–≤—É
        return
    user_data[user_id]["user_name"] = message.text
    bot.send_message(message.chat.id, "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380:")
    bot.register_next_step_handler(message, ask_phone_number)
def ask_phone_number(message):
    user_id = str(message.from_user.id)
    phone_number = message.text
    if re.match(r'^\+380\d{9}$', phone_number):
        user_data[user_id]["mobile_phone"] = phone_number
        markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add(
            telebot.types.KeyboardButton("–ù–æ–≤–∞ –ø–æ—à—Ç–∞"),
            telebot.types.KeyboardButton("–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞"),
            telebot.types.KeyboardButton("–°–∞–º–æ–≤–∏–≤—ñ–∑")
        )
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=markup)
        bot.register_next_step_handler(message, ask_delivery_method)
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX:")
        bot.register_next_step_handler(message, ask_phone_number)
def create_delivery_method_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(
        telebot.types.KeyboardButton("–ù–æ–≤–∞ –ø–æ—à—Ç–∞"),
        telebot.types.KeyboardButton("–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞"),
        telebot.types.KeyboardButton("–°–∞–º–æ–≤–∏–≤—ñ–∑")
    )
    return markup
def ask_delivery_method(message):
    user_id = str(message.from_user.id)
    user_data[user_id]["delivery_method"] = message.text
    if message.text == "–ù–æ–≤–∞ –ø–æ—à—Ç–∞":
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ —Ç–∞ –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω—è. –¢–∞–∫–æ–∂ –≤–∫–∞–∂—ñ—Ç—å –ü–Ü–ë —Ç–∞ –Ω–æ–º–µ—Ä –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:",reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, ask_delivery_address)
    elif message.text == "–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞":
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ —Ç–∞ –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω—è. –¢–∞–∫–æ–∂ –≤–∫–∞–∂—ñ—Ç—å –ü–Ü–ë —Ç–∞ –Ω–æ–º–µ—Ä –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:",reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, ask_delivery_address)
    elif message.text == "–°–∞–º–æ–≤–∏–≤—ñ–∑":
        markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        main_menu_button = telebot.types.KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
        markup.add(main_menu_button)
        bot.send_message(message.chat.id, "–î—è–∫—É—é, –º–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è‚ù§Ô∏è! –ß–µ–∫–∞—î–º–æ –≤–∞—Å –∑–∞ –∞–¥—Ä–µ—Å–æ—é –º. –ö–∏—ó–≤, –≤—É–ª.–°–∞–∫—Å–∞–≥–∞–Ω—Å—å–∫–æ–≥–æ, 77 –∑ –ø–æ–Ω–µ–¥—ñ–ª–∫–∞ –ø–æ –ø‚Äô—è—Ç–Ω–∏—Ü—é –∑ 10 –¥–æ 19 –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.", reply_markup=markup)
        store_user_data_in_firebase(user_id, user_data)
        send_to_manager(user_id)
def ask_delivery_address(message):
    user_id = str(message.from_user.id)
    cleaned_text = message.text
    if "delivery_credentials" not in user_data[user_id]:
        user_data[user_id]["delivery_credentials"] = cleaned_text
    else:
        user_data[user_id]["delivery_credentials"] += "\n" + cleaned_text

    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(
        telebot.types.KeyboardButton("–ü–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞"),
        telebot.types.KeyboardButton("–ù–∞–∫–ª–∞–¥–Ω–∏–π –ø–ª–∞—Ç—ñ–∂"),
    )
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, ask_payment_method)
print(ask_delivery_address)
def ask_payment_method(message):
    user_id = str(message.from_user.id)
    user_data[user_id]["payment_method"] = message.text
    markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    main_menu_button = telebot.types.KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    markup.add(main_menu_button)
    if message.text == "–ü–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞":
        bot.send_message(message.chat.id, "–î—è–∫—É—é, –º–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Ç—è–≥–æ–º 2-—Ö —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤ –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ ü•∞ [–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É].\n"
                                          "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏‚ù§Ô∏è")
    elif message.text == "–ù–∞–∫–ª–∞–¥–Ω–∏–π –ø–ª–∞—Ç—ñ–∂":
        bot.send_message(message.chat.id, "–î—è–∫—É—é, –º–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ‚ù§Ô∏è")
    store_user_data_in_firebase(user_id, user_data)
    send_to_manager(user_id)
    bot.send_message(message.chat.id, "–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é, –æ–±—Ä–∞–≤—à–∏ —Ü—é –æ–ø—Ü—ñ—é:", reply_markup=markup)
def store_user_data_in_firebase(user_id, user_data):
    try:
        cleaned_user_data = clean_data_for_firebase(user_data)
        user_id_str = str(user_id)
        users_collection = db.collection('users')
        new_user_doc = users_collection.document(user_id_str).set(cleaned_user_data)
        print("User data stored in Firebase:", user_data)
    except Exception as e:
        print("Error storing user data in Firebase:", e)
def should_store_character(char):
    category = unicodedata.category(char)
    # –Ü–≥–Ω–æ—Ä—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "So" (–ï–º–æ–¥–∂—ñ) —Ç–∞ "Cf" (–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è) —ñ —Å—Ç—ñ–∫–µ—Ä–∏
    return category not in ('So', 'Cf') and not char.startswith('/')

def clean_data_for_firebase(data):
    cleaned_data = {}
    for key, value in data.items():
        if isinstance(value, str):
            cleaned_value = ''.join(char for char in value if should_store_character(char))
            cleaned_data[key] = cleaned_value
        else:
            cleaned_data[key] = value
    return cleaned_data
user_data.clear()
db = firestore.client()
print(user_data)
bot.polling()
